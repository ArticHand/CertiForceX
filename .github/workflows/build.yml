name: Build, Test, and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build-and-test:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Run tests
      run: |
        $env:DOTNET_SYSTEM_GLOBALIZATION_INVARIANT = "1"
        dotnet test --no-build --verbosity normal --configuration Release `
          --logger "console;verbosity=detailed" `
          --blame-hang-timeout 2min `
          -- RunConfiguration.CollectionBehavior=DisableTestParallelization `
          -- RunConfiguration.MaxCpuCount=1 `
          -- RunConfiguration.Diagnostic=true

  create-release:
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.x

    - name: Set up Git for tag push
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"

    - name: Bump version and create tag
      id: tag_version
      shell: bash
      run: |
        git fetch --tags
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        
        # Remove 'v' prefix if exists
        version=${latest_tag#v}
        
        # Split version into parts
        IFS='.' read -r -a version_parts <<< "$version"
        
        # Ensure we have at least 3 parts (major.minor.patch)
        while [ ${#version_parts[@]} -lt 3 ]; do
          version_parts+=(0)
        done
        
        # Increment patch version
        version_parts[2]=$((version_parts[2] + 1))
        
        # Construct new version
        new_version="${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"
        new_tag="v${new_version}"
        
        echo "Previous tag: ${latest_tag}"
        echo "New tag: ${new_tag}"
        
        # Set outputs for subsequent steps
        echo "NEW_TAG=${new_tag}" >> $GITHUB_ENV
        echo "new_tag=${new_tag}" >> $GITHUB_OUTPUT
        
        # Create and push the new tag
        git tag -a ${new_tag} -m "Release ${new_tag}"
        git push origin ${new_tag}

    - name: Build release artifacts
      run: |
        dotnet publish -c Release -o ./publish --no-restore --no-build
        
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.NEW_TAG }}
        name: Release ${{ env.NEW_TAG }}
        body: |
          ## Changes in this release
          - Automated release
          - Built from ${{ github.sha }}
        draft: false
        prerelease: false
        files: |
          **/publish/*.dll
          **/publish/*.pdb
          **/publish/*.json
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}