name: Build, Test, and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_CLI_TELEMETRY_OPTOUT: '1'
  NUGET_XMLDOC_MODE: 'skip'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.CERTIFORCEX }}

    - name: Setup .NET ${{ env.DOTNET_VERSION }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore
      continue-on-error: false

    - name: Build
      run: dotnet build --configuration Release --no-restore --no-incremental
      continue-on-error: false

    - name: Run tests
      run: |
        $env:DOTNET_SYSTEM_GLOBALIZATION_INVARIANT = "1"
        dotnet test --no-build --verbosity normal --configuration Release `
          --logger "console;verbosity=detailed" `
          --blame-hang-timeout 2min `
          -- RunConfiguration.CollectionBehavior=DisableTestParallelization `
          -- RunConfiguration.MaxCpuCount=1 `
          -- RunConfiguration.Diagnostic=true
      continue-on-error: false

  create-release:
    name: Create Release
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: windows-latest
    
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.CERTIFORCEX }}

    - name: Setup .NET ${{ env.DOTNET_VERSION }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git config --global pull.rebase false

    - name: Bump version and create tag
      id: tag_version
      env:
        GITHUB_TOKEN: ${{ secrets.CERTIFORCEX }}
      run: |
        # Fetch all tags
        git fetch --tags
        
        # Get latest tag or default to v0.0.0
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        
        # Remove 'v' prefix if exists
        version=${latest_tag#v}
        
        # Split version into parts
        IFS='.' read -r -a version_parts <<< "$version"
        
        # Ensure we have exactly 3 parts (major.minor.patch)
        while [ ${#version_parts[@]} -lt 3 ]; do
          version_parts+=(0)
        done
        
        # Increment patch version
        version_parts[2]=$((version_parts[2] + 1))
        
        # Construct new version
        new_version="${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"
        new_tag="v${new_version}"
        
        echo "Previous tag: ${latest_tag}"
        echo "New tag: ${new_tag}"
        
        # Set outputs for subsequent steps
        echo "NEW_TAG=${new_tag}" >> $GITHUB_ENV
        echo "new_tag=${new_tag}" >> $GITHUB_OUTPUT
        
        # Create and push the new tag
        git tag -a ${new_tag} -m "Release ${new_tag} [skip ci]"
        git remote set-url origin https://x-access-token:${{ secrets.CERTIFORCEX }}@github.com/${{ github.repository }}.git
        git push origin ${new_tag} || echo "Tag push failed, continuing anyway"

    - name: Build release artifacts
      run: |
        # Clean publish directory
        if (Test-Path -Path "./publish") {
          Remove-Item -Path "./publish" -Recurse -Force
        }
        
        # Publish the project
        dotnet publish CertUtils/CertUtils.csproj `
          -c Release `
          -o ./publish `
          --no-restore `
          --no-build `
          -p:Version=${{ env.NEW_TAG }}
          
        # List published files for debugging
        Get-ChildItem -Path ./publish -Recurse | Select-Object FullName, Length | Format-Table -AutoSize

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.CERTIFORCEX }}
      with:
        tag_name: ${{ env.NEW_TAG }}
        name: Release ${{ env.NEW_TAG }}
        body: |
          ## Changes in this release
          - Automated release
          - Built from [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          
          ### Artifacts
          - `CertUtils.dll` - Main library
          - `*.pdb` - Debug symbols
          - `*.json` - Configuration files
        draft: false
        prerelease: false
        files: |
          ./publish/CertUtils.dll
          ./publish/*.pdb
          ./publish/*.json

    - name: Upload NuGet Package
      if: success()
      run: |
        $version = ${{ env.NEW_TAG }}.TrimStart('v')
        dotnet pack CertUtils/CertUtils.csproj `
          -c Release `
          -p:PackageVersion=$version `
          -p:Version=$version `
          --no-restore `
          --no-build `
          --output nupkg
        
        $nugetApiKey = ${{ secrets.NUGET_API_KEY }}
        $package = Get-ChildItem -Path "./nupkg/*.nupkg" | Select-Object -First 1
        
        if ($package) {
          Write-Host "Publishing package: $($package.Name)"
          dotnet nuget push $package.FullName `
            --skip-duplicate `
            --api-key $nugetApiKey `
            --source https://api.nuget.org/v3/index.json
        } else {
          Write-Warning "No NuGet package found to publish"
        }